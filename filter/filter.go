package filter

// ---------------------------------------------------------------------------------------
//  imports
// ---------------------------------------------------------------------------------------

import (
	"github.com/robertkrimen/otto"
)

// ---------------------------------------------------------------------------------------
//  constants
// ---------------------------------------------------------------------------------------

const (
	InputVariableName = "f"
)

// ---------------------------------------------------------------------------------------
//  types
// ---------------------------------------------------------------------------------------

type Filter struct {
	Expr string
}

// ---------------------------------------------------------------------------------------
//  public functions
// ---------------------------------------------------------------------------------------

func NewFilter(expr string) *Filter {
	if expr == "" {
		expr = "true"
	}

	return &Filter{Expr: expr}
}

// ---------------------------------------------------------------------------------------
//  public members
// ---------------------------------------------------------------------------------------

func (f *Filter) Eval(v interface{}) (bool, error) {
	vm := otto.New()
	v, err := vm.ToValue(v)
	if err != nil {
		return false, err
	}

	err = vm.Set(InputVariableName, v)
	if err != nil {
		return false, err
	}

	ret, err := vm.Run(f.Expr)
	if err != nil {
		return false, err
	}

	return ret.ToBoolean()
}
